# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: users-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  version: 0.0.20-master.0

plugins:
  - serverless-apigateway-route-settings

provider:
  name: aws
  runtime: dotnet6
  stage: dev
  region: eu-central-1
  # logs:
  #   httpApi: true
  httpApi:
    payload: '1.0' #Or use 1.0
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:*"
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - lambda:InvokeFunction
  #       - lambda:InvokeAsync
  #     Resource:

# arn:aws:lambda:eu-central-1:087906701811:function:routing3-cache-lambda-tool-dev-local-routing
# Resource: "arn:aws:lambda:eu-central-1:087906701811:function:routing3-local-routing-service-dev-local-routing" arn:aws:lambda:eu-central-1:087906701811:function:local-routing
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  individually: true

functions:
  UserManagement-dev:
    handler: UserManagement::UserManagement.LambdaEntryPoint::FunctionHandlerAsync
    # memorySize: 3072
    environment:
      DB_HOST: ''
      DB_NAME: ''
      DB_USER: ''
      DB_PASSWORD: ''
      DB_PORT: '5432'
      AUTH_EXPIRE: 1440
      AUTH_SECRET: 'AUTH_SECRET_SPEERIT_EUROFI'
      AUTH_VALID_AUDIENCE: 'ApplicationUser'
      AUTH_VALID_ISSUER: 'https://e7xcywuxa1.execute-api.eu-central-1.amazonaws.com'
      #AUTH_VALID_ISSUER: 'https://sab4dv9vg1.execute-api.eu-central-1.amazonaws.com'
    # you can add packaging information here
    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
      securityGroupIds:
        - sg-067d40de060df307c
      subnetIds:
        - subnet-077f37866a4983b96
    package:
      artifact: bin/Release/net6.0/UserManagement-dev-${self:custom.version}.zip
    timeout: 20
    #provisionedConcurrency: 10 # optional, Count of provisioned lambda instances
    #reservedConcurrency: 20 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit
    events:
      - httpApi:
          method: GET
          path: /swagger/index.html
      - httpApi:
          method: GET
          path: /swagger/v1/swagger.json
      - httpApi:
          method: GET
          path: /swagger/swagger-ui.css
      - httpApi:
          method: GET
          path: /swagger/swagger-ui-bundle.js
      - httpApi:
          method: GET
          path: /swagger/swagger-ui-standalone-preset.js
      - httpApi:
          method: POST
          path: routing/authenticate/login
      - httpApi:
          method: POST
          path: routing/authenticate/Register
      - httpApi:
          method: POST
          path: routing/authenticate/RegisterAdmin

      # - httpApi:
      #     method: POST
      #     path: /routing/accounts/login
      # - httpApi:
      #     method: GET
      #     path: /routing/accounts
      # - httpApi:
      #     method: GET
      #     path: /routing/accounts/{username}
      # - httpApi:
      #     method: PATCH
      #     path: /routing/accounts/changepassword
      # - httpApi:
      #     method: PATCH
      #     path: /routing/accounts/{username}
      # - httpApi:
      #     method: PATCH
      #     path: /routing/accounts/activate/{userID}
          
    # environment:
    #   S3_BUCKET_NAME:
    #     'Fn::ImportValue': '${opt:stage, self:provider.stage}-LocalRoutingMapCache'
      #FUNCTIONNAME_ARN: 
        #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"